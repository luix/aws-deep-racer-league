######################
# Follow Racing Line
######################
#
# In this example we measure how far away the car is from the racing line
# and give a higher reward if the car is close to it.
#

def reward_function(params):
    '''
    Reward the agent to follow the racing lane, 
    the optimal path around the race course.
    '''
    import math

    # Read input parameters
    x = params['x']
    y = params['y']
    speed = params['speed']
    progress = params['progress']
    closest_waypoints = params['closest_waypoints']

    # Racing line waypoints
    racing_line_waypoints = [[4.610694188110224,1.5974245612301852],[4.443427506132032,1.7015939253761174],[4.274621121321145,1.8029289773193637],[4.104035215245068,1.900949555164127],[3.9314299694713086,1.9951754970146118],[3.7565655655673753,2.0851266409750213],[3.5792021851007703,2.1703228251495617],[3.3991000096390023,2.250283887642436],[3.2160192207495766,2.324529666557847],[3.02972,2.39258],[3.0297199999999997,2.3925799999999997],[2.798708803577319,2.5372070050025863],[2.573161961433688,2.626534681925149],[2.354964400260106,2.6653730226893373],[2.14600104674757,2.6585320192168016],[1.948156827587081,2.610821663429194],[1.7633166694696374,2.527051947248163],[1.5933654990862385,2.4120328625953595],[1.4401882431278832,2.2705744013924347],[1.3056698282855708,2.1074865555610396],[1.1916951812503,1.927579317022823],[1.1001492287130705,1.7356626776994366],[1.0329168973648812,1.5365466295125314],[0.9918831138967312,1.3350411643837565],[0.9789328049996193,1.1359562742347633],[0.9959508973645449,0.9441019509872026],[1.044798078951825,0.7642624921058092],[1.1249825972220133,0.5987284720192982],[1.2317269295689983,0.44524730092187503],[1.359798472925999,0.30108397738962805],[1.5039646242262354,0.16350349999864644],[1.6589927804029259,0.02977086732501913],[1.8196503383892897,-0.10284892205516542],[1.9807046951185467,-0.23709086956581854],[2.136923247523915,-0.37568997663085074],[2.2836853527950014,-0.5209653084463035],[2.4212788207214957,-0.6718997605176993],[2.552351981091149,-0.8258718336638821],[2.679568205639299,-0.9802498050153516],[2.805590866101286,-1.1324019517026067],[2.9330833342124514,-1.279696550856149],[3.064708981708133,-1.4195018796064771],[3.203131180323671,-1.5491862150840912],[3.3510132001819564,-1.6661179442044192],[3.5101705665096383,-1.768581381142832],[3.679515064282163,-1.8579981221316841],[3.8573372757293716,-1.936460928197329],[4.041927783081109,-2.0060625603661206],[4.231577168567218,-2.0688957796644134],[4.424576014417541,-2.1270533471185606],[4.619214902861922,-2.1826280237549156],[4.813784416130202,-2.2377125705998338],[5.006575136453917,-2.29439974867723],[5.196341463331871,-2.3541157064551386],[5.383684499833583,-2.415632452777759],[5.569664893423848,-2.4770615250375076],[5.755343291567449,-2.5365144606267993],[5.941780341729181,-2.592102796938051],[6.130036691373827,-2.6419380713636755],[6.321172987966185,-2.6841318212960927],[6.516249878971037,-2.716795584127714],[6.716328011853177,-2.738040897250958],[6.922455265921544,-2.7459817495230943],[7.134118729492807,-2.7390317990968187],[7.347765643216972,-2.716188349861479],[7.559492791110572,-2.676515992801849],[7.765396957190141,-2.6190793189027],[7.961574925472205,-2.542942919148803],[8.144123479973292,-2.447171384524931],[8.309139404709939,-2.330829306015854],[8.452719483698669,-2.1929812746063435],[8.570960500956021,-2.0326918812811736],[8.659982776537007,-1.8490928648362086],[8.717267752445474,-1.6451992156835062],[8.74237777339815,-1.429962694874883],[8.735050858105193,-1.2128362575833054],[8.695025025276767,-1.0032728589817397],[8.622038293623024,-0.8107254542431523],[8.515828681854133,-0.6446469985405101],[8.376227693942859,-0.5143031362165641],[8.207679722120547,-0.4197169432636213],[8.021258505517087,-0.34762866973205336],[7.82855126100044,-0.2837497410346633],[7.639243647486314,-0.21607996384315026],[7.454879594727739,-0.14241710045215192],[7.274824433395521,-0.0631806924738802],[7.098443470423415,0.02120968991371836],[6.925102012745181,0.1103344765326969],[6.754165482836021,0.203774079475799],[6.585091460325954,0.30109476973921584],[6.417595374605607,0.40182325244529443],[6.251437407242485,0.505479365698239],[6.0863777398041,0.6115829476022536],[5.9221765538579545,0.7196538362615419],[5.758594030971558,0.8292118697803071],[5.595390352712413,0.9397768862627551],[5.432325700648028,1.050868723813089],[5.269160256345909,1.162007220535513],[5.105654201373564,1.2727122145342307],[4.941567717298496,1.3825035439134457],[4.776660985688214,1.4909010467773622]]

    # Calculate closest waypoints indices in racing line
    if closest_waypoints[0] > closest_waypoints[1]:
        top = closest_waypoints[0]
    else: 
        top = closest_waypoints[1]

    if top % 2 == 1:
        top += 1

    d = top // 2
    a = d - 3
    b = d - 2
    c = d - 1
    e = d + 1

    if a < 0:
        a = 101 + a
    if b < 0:
        b = 101 + b
    if c < 0:
        c = 101 + c

    if a > 100:
        a -= 100
    if b > 100:
        b -= 100
    if c > 100:
        c -= 100
    if d > 100:
        d -= 100
    if e > 100:
        e -= 100

    # Possible closest waypoints tuples
    closest_points = [a, b, c, d, e]

    # Calculate minimum distance to x, y 
    min_dist = 10.0

    for idx in closest_points:
        point = racing_line_waypoints[idx]
        dist = math.sqrt((point[0]-x)**2 + (point[1]-y)**2)
        # print("calculate dist:", min_dist)
        if dist < min_dist:
            min_dist = dist
            # print(i, min_dist)    

    # Calculate 3 markers that are at varying distances away from center line
    marker_1 = 0.05
    marker_2 = 0.10
    marker_3 = 0.20

    # Give hi
    if min_dist <= marker_1:
        reward = 10.0   # car is closer to racing line, so give high reward
    elif min_dist <= marker_2:
        reward = 5.0   # car is near to racing line, so give good reward
    elif min_dist <= marker_3:
        reward = 1.0   # car is not too far from racing line, so give some reward
    else:
        reward = 1e-3  # car is far from racing line, so give minimal reward

    if reward >= 1.0:
        if speed >= 3.0:
            reward += speed
        reward += progress

    # Always return a float value
    return float(reward)


