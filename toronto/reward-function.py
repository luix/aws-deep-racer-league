######################
# Follow Racing Line
######################
#
# In this example we measure how far away the car is from the racing line
# and give a higher reward if the car is close to it.
#

def reward_function(params):
    '''
    Reward the agent to follow the racing lane, 
    the optimal path around the race course.
    '''
    import math

    # Read input parameters
    x = params['x']
    y = params['y']
    speed = params['speed']
    progress = params['progress']
    center_line_waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']

    # Racing line waypoints
    eval_racing_line_waypoints = [[4.62055,1.61558],[4.528456312699658,1.678613303642827],[4.418679536976235,1.7480396176440933],[4.292970844562764,1.822241101692638],[4.153081407192286,1.8995999154772987],[4.000762396597841,1.9784982186869151],[3.837764984512462,2.057318171010324],[3.6658403426691923,2.1344419321363657],[3.4867396428010666,2.208251661753877],[3.302214056641126,2.2771295195516985],[3.114014755922405,2.339457665218666],[2.9238929123779465,2.3936182584436203],[2.7335996977407846,2.4379934589153986],[2.544886283743959,2.4709654263228398],[2.359503842120508,2.4909163203547826],[2.17920354460347,2.4962283007000647],[2.0057365629258834,2.485283527047526],[1.8408540688207846,2.456464159086003],[1.6863072340212142,2.4081523565043366],[1.5438472302602086,2.338730278991362],[1.4152252292708063,2.2465800862359204],[1.3021119464099786,2.13050104181933],[1.2054826495193813,1.9928977651670092],[1.12595655823515,1.8380207094305712],[1.0641500097870864,1.6701352708023118],[1.0206793414049933,1.4935068454745284],[0.9961608903186733,1.3124008296395178],[0.9912109937579285,1.1310826194895773],[1.0064459889525619,0.9538176112170034],[1.042482213132375,0.7848712010140942],[1.0995616312640324,0.6278058000277219],[1.1758608517797535,0.4823055546396165],[1.2688481154364262,0.34672445958446757],[1.3759910295117455,0.21941532006867373],[1.4947572012834078,0.09873094129863497],[1.622614238029108,-0.016975871519249924],[1.757029747026542,-0.12935231317858054],[1.8954713355534065,-0.24004557847295882],[2.0354066108873967,-0.3507028621959849],[2.1743244605949466,-0.4629545753291371],[2.310843912847834,-0.5775397843883261],[2.445256208649994,-0.6938786778258427],[2.5779875281706452,-0.8112850172674432],[2.7094640515790096,-0.9290725643388863],[2.840111959044305,-1.0465550806659283],[2.970357430735751,-1.1630463278743266],[3.100626646822567,-1.2778600675898377],[3.231345787473972,-1.390310061438219],[3.3629410328591853,-1.4997100710452267],[3.4958385631474282,-1.6053738580366197],[3.6304645585079167,-1.7066151840381534],[3.7672451991098743,-1.802747810675586],[3.9066066651225175,-1.8930854995746744],[4.048975136715067,-1.9769420123611754],[4.194776794056741,-2.053631110660846],[4.344437817316759,-2.122466556099443],[4.498384386664341,-2.1827621103027237],[4.657042682268708,-2.233831534896446],[4.820838884299076,-2.274988591506366],[4.990199172924665,-2.305547041758241],[5.165300393413072,-2.324875478880872],[5.344818301131806,-2.332672602979375],[5.526869596692619,-2.328760056708216],[5.70957003600194,-2.312959690473387],[5.891035374966205,-2.2850933546808845],[6.069381369491841,-2.244982899736701],[6.242723775485281,-2.192450176046831],[6.4091783488529535,-2.1273170340172665],[6.566860845501293,-2.049405324054004],[6.713887021336731,-1.958536896563037],[6.848372632265695,-1.8545336019503578],[6.968433434194617,-1.7372172906219632],[7.07218518302993,-1.6064098129838436],[7.1578948398524735,-1.4621011539407633],[7.225227131855216,-1.3058355620368012],[7.2746026612726755,-1.1399977905920078],[7.30644944145686,-0.9669808338119034],[7.3211954857597705,-0.7891776859020069],[7.3192688075334145,-0.6089813410678377],[7.301097420129799,-0.4287847935149158],[7.267109336900928,-0.25098103744876016],[7.217732571198811,-0.07796306707489009],[7.153395136375448,0.08787612340117434],[7.07452504578285,0.24414353977391434],[6.9815888841333225,0.38858471971375047],[6.8755586427450375,0.520760405869025],[6.757761669520036,0.6415076301816528],[6.629532701598473,0.7516899635854192],[6.492206476120495,0.8521709770141079],[6.34711773022626,0.9438142414015047],[6.195601201055917,1.0274833276813937],[6.038991625749617,1.10404180678756],[5.878623741447514,1.1743532496537878],[5.715832285289759,1.2392812272138622],[5.551951994416505,1.2996893104015679],[5.388317605967901,1.3564410701506895],[5.226263857084106,1.4104000773950112],[5.067125484905265,1.4624299030683185],[4.912237226571532,1.513394118104396],[4.76293381922306,1.5641562934370283],[4.62055,1.61558]]
    training_racing_line_waypoints = [[4.62055,1.61558],[4.528456312699658,1.678613303642827],[4.418679536976235,1.7480396176440933],[4.292970844562764,1.822241101692638],[4.153081407192286,1.8995999154772987],[4.000762396597841,1.9784982186869151],[3.837764984512462,2.057318171010324],[3.6658403426691923,2.1344419321363657],[3.4867396428010666,2.208251661753877],[3.302214056641126,2.2771295195516985],[3.114014755922405,2.339457665218666],[2.9238929123779465,2.3936182584436203],[2.7335996977407846,2.4379934589153986],[2.544886283743959,2.4709654263228398],[2.359503842120508,2.4909163203547826],[2.17920354460347,2.4962283007000647],[2.0057365629258834,2.485283527047526],[1.8408540688207846,2.456464159086003],[1.6863072340212142,2.4081523565043366],[1.5438472302602086,2.338730278991362],[1.4152252292708063,2.2465800862359204],[1.3021119464099786,2.13050104181933],[1.2054826495193813,1.9928977651670092],[1.12595655823515,1.8380207094305712],[1.0641500097870864,1.6701352708023118],[1.0206793414049933,1.4935068454745284],[0.9961608903186733,1.3124008296395178],[0.9912109937579285,1.1310826194895773],[1.0064459889525619,0.9538176112170034],[1.042482213132375,0.7848712010140942],[1.0995616312640324,0.6278058000277219],[1.1758608517797535,0.4823055546396165],[1.2688481154364262,0.34672445958446757],[1.3759910295117455,0.21941532006867373],[1.4947572012834078,0.09873094129863497],[1.622614238029108,-0.016975871519249924],[1.757029747026542,-0.12935231317858054],[1.8954713355534065,-0.24004557847295882],[2.0354066108873967,-0.3507028621959849],[2.1743244605949466,-0.4629545753291371],[2.310843912847834,-0.5775397843883261],[2.445256208649994,-0.6938786778258427],[2.5779875281706452,-0.8112850172674432],[2.7094640515790096,-0.9290725643388863],[2.840111959044305,-1.0465550806659283],[2.970357430735751,-1.1630463278743266],[3.100626646822567,-1.2778600675898377],[3.231345787473972,-1.390310061438219],[3.3629410328591853,-1.4997100710452267],[3.4958385631474282,-1.6053738580366197],[3.6304645585079167,-1.7066151840381534],[3.7672451991098743,-1.802747810675586],[3.9066066651225175,-1.8930854995746744],[4.048975136715067,-1.9769420123611754],[4.194776794056741,-2.053631110660846],[4.344437817316759,-2.122466556099443],[4.498384386664341,-2.1827621103027237],[4.657042682268708,-2.233831534896446],[4.820838884299076,-2.274988591506366],[4.990199172924665,-2.305547041758241],[5.165300393413072,-2.324875478880872],[5.344818301131806,-2.332672602979375],[5.526869596692619,-2.328760056708216],[5.70957003600194,-2.312959690473387],[5.891035374966205,-2.2850933546808845],[6.069381369491841,-2.244982899736701],[6.242723775485281,-2.192450176046831],[6.4091783488529535,-2.1273170340172665],[6.566860845501293,-2.049405324054004],[6.713887021336731,-1.958536896563037],[6.848372632265695,-1.8545336019503578],[6.968433434194617,-1.7372172906219632],[7.07218518302993,-1.6064098129838436],[7.1578948398524735,-1.4621011539407633],[7.225227131855216,-1.3058355620368012],[7.2746026612726755,-1.1399977905920078],[7.30644944145686,-0.9669808338119034],[7.3211954857597705,-0.7891776859020069],[7.3192688075334145,-0.6089813410678377],[7.301097420129799,-0.4287847935149158],[7.267109336900928,-0.25098103744876016],[7.217732571198811,-0.07796306707489009],[7.153395136375448,0.08787612340117434],[7.07452504578285,0.24414353977391434],[6.9815888841333225,0.38858471971375047],[6.8755586427450375,0.520760405869025],[6.757761669520036,0.6415076301816528],[6.629532701598473,0.7516899635854192],[6.492206476120495,0.8521709770141079],[6.34711773022626,0.9438142414015047],[6.195601201055917,1.0274833276813937],[6.038991625749617,1.10404180678756],[5.878623741447514,1.1743532496537878],[5.715832285289759,1.2392812272138622],[5.551951994416505,1.2996893104015679],[5.388317605967901,1.3564410701506895],[5.226263857084106,1.4104000773950112],[5.067125484905265,1.4624299030683185],[4.912237226571532,1.513394118104396],[4.76293381922306,1.5641562934370283],[4.62055,1.61558]]

    if len(center_line_waypoints) < 190:
        racing_line_waypoints = eval_racing_line_waypoints
    else:
        racing_line_waypoints = training_racing_line_waypoints
    
    # Calculate closest waypoints indices in racing line
    if closest_waypoints[0] > closest_waypoints[1]:
        top = closest_waypoints[0]
    else: 
        top = closest_waypoints[1]

    if top % 2 == 1:
        top += 1

    d = top // 2
    a = d - 3
    b = d - 2
    c = d - 1
    e = d + 1

    if a < 0:
        a = 101 + a
    if b < 0:
        b = 101 + b
    if c < 0:
        c = 101 + c

    if a > 100:
        a -= 100
    if b > 100:
        b -= 100
    if c > 100:
        c -= 100
    if d > 100:
        d -= 100
    if e > 100:
        e -= 100

    # Possible closest waypoints tuples
    closest_points = [a, b, c, d, e]

    # Calculate minimum distance to x, y 
    min_dist = 10.0

    for idx in closest_points:
        point = racing_line_waypoints[idx]
        dist = math.sqrt((point[0]-x)**2 + (point[1]-y)**2)
        # print("calculate dist:", min_dist)
        if dist < min_dist:
            min_dist = dist
            # print(i, min_dist)    

    # Calculate 3 markers that are at varying distances away from center line
    marker_1 = 0.05
    marker_2 = 0.10
    marker_3 = 0.20

    # Give hi
    if min_dist <= marker_1:
        reward = 20.0   # car is closer to racing line, so give high reward
    elif min_dist <= marker_2:
        reward = 7.0   # car is near to racing line, so give good reward
    elif min_dist <= marker_3:
        reward = 1.0   # car is not too far from racing line, so give some reward
    else:
        reward = 1e-3  # car is far from racing line, so give minimal reward

    if reward >= 1.0:
        if speed >= 2.5:
            reward += speed
        reward += (progress / 10.0)

    print('reward:',reward,',speed:',speed,',dist:',min_dist,',x:',x,',y:',y,',top:',top,',d:',d,',progress:',progress)

    # Always return a float value
    return float(reward)


